D1. a)
find_M_element <- function(x, k) {
  n <- length(x)
  threshold <- floor(n/2) + 1
  
  for (i in 1:k) {
    random_index <- sample(1:n, 1) 
    random_element <- x[random_index] 
    
    count <- sum(x == random_element)
    
    if (count >= threshold) {
      return(random_element) 
    }
  }
  
  return("x nu are M-element") 
}

#utilizare
set.seed(1) 
x <- c(1, 2, 3, 4, 5, 1, 1, 1, 1) 
k <- 3

result <- find_M_element(x, k)
print(result)

D2
element_ith <- function(i, A) {
  n <- length(A)
  
  if (n == 1) {
    return(A)
  }
  
  z <- sample(A, 1)
  A1 <- A[A < z]
  A2 <- A[A > z]
  
  if (length(A1) > i) {
    return(element_ith(i, A1))
  } else if (n > i + length(A2)) {
    return(z)
  } else {
    return(element_ith(i - n + length(A2), A2))
  }
}
# unde A1=A<, iar A2=A>

D3. a)
approximate_median <- function(S, a) {
  n <- length(S)
  m <- floor(a * log(n))
  
  if (m >= n) {
    stop("Invalid parameter 'a'.")
  }
  
  S_prime <- sample(S, m)
  sorted_S_prime <- sort(S_prime)
  
  if (m %% 2 == 1) {
    median_index <- (m + 1) / 2
    return(sorted_S_prime[median_index])
  } else {
    median_index_1 <- m / 2
    median_index_2 <- median_index_1 + 1
    return(mean(sorted_S_prime[c(median_index_1, median_index_2)]))
  }
}

# utilizare
set.seed(123)
S <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
a <- 0.5

approx_median <- approximate_median(S, a)
print(approx_median)
